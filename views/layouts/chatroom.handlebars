<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<link rel="stylesheet" type="text/css" href="styleSheets/base.css"/>
    <link rel="stylesheet" type="text/css" href="styleSheets/chatroom.css"/>

    <link rel="stylesheet" href="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css">
    <script src="http://code.jquery.com/jquery-1.11.3.min.js"></script>
    <script src="http://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js"></script>

		<title>Sofa King</title>
		<script src="//code.jquery.com/jquery-2.1.4.min.js"></script>
	</head>
	<body>
    <div>
        <div>
            <div class="tab" style="background-color : rgb(60,190,60);">
              <a class="tab" href="#urlPopup" data-rel="popup">Suggest a New Video</a>

              <div data-role="popup" id="urlPopup" class="ui-content" style="min-width:1000px;">
                <form id="suggestInput" method="post" action="demoform.asp">
                  <label for="usrnm" class="ui-hidden-accessible">URL:</label>
                  <input type="text" name="url" id="videoSuggestion" placeholder="Video ID">
                </form>
              </div>
            </div>
            <div class="tab" style="background-color : rgb(190,60,60);">
              <a class="tab" href="#videoQ" data-rel="popup">Video Queue</a>

              <div data-role="popup" id="videoQ" class="ui-content" style="min-width:1000px;">
                  <!-- Write video Queue display -->
                  Next video to be displayed:
              </div>
            </div>
            <div class="tab" style="background-color : rgb(190,60,190);">
                <a class="tab" href="#votingPopup" data-rel="popup">Voting</a>

                <div data-role="popup" id="votingPopup" class="ui-content" style="min-width:1000px;">
                    <ul id="votingArea">
                        <h3>Vote to kick?</h3>
                        <h4>Select a User:</h4>
                        <ul id="votelist">

                            <p id="demo"></p>
                        </ul>
                    </ul>
                </div>
            </div>
        </div>
        <div>
            <script src="scripts/peerinit.js">initialize({{myID}})</script>
            <div style="width:50%; height:480px; clear:left; float:left;">
                <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
                <div id="player"></div>
            </div>
			<div class="userlist" style="float:left;">
                <strong>User List</strong> <br>
                <ul id="listOfUsers">

                </ul>
            </div>
        </div>
        <div class="chatbox" style="height:500px; clear:left; overflow:scroll;">
            <ul id="chatlog"></ul>
            <form id="chatInput" action="">
                <input id="m" autocomplete="off" />
            </form>
        </div>
    </div>

    <script>
        // 2. This code loads the IFrame Player API code asynchronously.
        var tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var player;
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '100%',
                width: '100%',
                //videoId: 'qaddgd8UI90',
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
            //event.target.playVideo();
        }



    </script>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        var first = 0;
        var vidArr = [];

        var socket = io();

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        function onPlayerStateChange(event) {
            if (event.data === YT.PlayerState.ENDED) {
				if(vidArr.length == 0){
					first = 0;
					socket.on('suggest video', function (data) {
					$('#videoQ').append($('<li>fg').text(data.suggestedvideo));
					socket.emit('change video', vidArr);
					});
				}
				else{
					console.log("should play next vid");
					player.loadVideoById(vidArr[0]);
					$('#videoQ li').eq(0).remove();
					vidArr.shift();
				}
            }
            else if(event.data === YT.PlayerState.PLAYING){
                console.log('Playing');
                socket.emit('PlayVideo', player.getCurrentTime());

            }
            else if(event.data === YT.PlayerState.PAUSED){
                console.log('Paused');
                socket.emit('PauseVideo', player.getCurrentTime());
            }
	    else if (event.data === onError){

	    }
        }


        function onButtonVoteClick(element){
            var userName = element.innerHTML;
            var txt;
            var msg = confirm("Initiate vote to kick?");
            if (msg === true) {
                txt = "Initiating Vote...";
                socket.emit("Call Vote", userName);
            } else {
                txt = "Vote cancelled";
            }
            document.getElementById("demo").innerHTML = txt;
        }

        $( document ).ready(function() {


            var query = window.location.search.slice(10);
            socket.emit('adduser', {room: query});

            $('#chatInput').submit(function (e) {
                e.preventDefault();
                socket.emit('chat message', $('#m').val());
                $('#m').val('');
                return false;
            });

            socket.on('chat message', function (userName, message) {
                $('#chatlog').append($('<li>').text(userName + ": " + message));
            });

            $('#suggestInput').submit(function (e) {
                e.preventDefault();
                socket.emit('suggest video', {suggestedvideo: $('#videoSuggestion').val()});
                $('#videoSuggestion').val('');
                return false;
            });

            socket.on('Vote Kick', function(userName){
                var msg = confirm("Kick " + userName + "?");
                if(msg === true){
                    socket.emit("kick count", 'yes', userName);
                } else{
                  //   prompt("Vote cancelled");
						socket.emit("kick count", 'no', userName);
                }

            });

            socket.on('suggest video', function (data) {
                $('#videoQ').append($('<li>fg').text(data.suggestedvideo));
	        });

            socket.on('change video', function (data) {
	            vidArr = data.videoAr.slice(0);
	            console.log(vidArr);
	            if(first === 0){
	                console.log('in the first if statement');
                    player.loadVideoById(vidArr[0]);
   	                vidArr.shift();
	            }
	            first = 1;
	            console.log(vidArr);

            });

            socket.on('PlayVideo', function(time){

                //Ignore any outdated play requests
                if(Math.abs(time-player.getCurrentTime()) > 2){
                    return;
                }
                player.playVideo();
            });

            socket.on('PauseVideo', function(time){
                player.pauseVideo();
                if(Math.abs(time-player.getCurrentTime()) > 2){
                    player.seekTo(time, true);
                }
            });

	        socket.on('update userLists', function(userlist){
                //Clear the list of the old list of users
                $('#listOfUsers').empty();

                //Then fill the list with the new list of users
                for(var i = 0; i < userlist.length; i++){
                    $('#listOfUsers').append($('<div id="box">').text(userlist[i].userName));
                }

                //Same with the voting list
                $('#votelist').empty();

                //Then fill the list with the new list of users
                for(var i = 0; i < userlist.length; i++){
                    $('#votelist').append($('<button id="voteButton" onClick="onButtonVoteClick(this)">').text(userlist[i].userName));
                }

	        });
        });
    </script>

	</body>

</html>
